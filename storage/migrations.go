// Code generated by go-bindata. DO NOT EDIT.
// sources:
// storage/migrations/000002_accounts.down.sql (21B)
// storage/migrations/000002_accounts.up.sql (294B)
// storage/migrations/000003_users.down.sql (49B)
// storage/migrations/000003_users.up.sql (679B)
// storage/migrations/000004_groups.down.sql (76B)
// storage/migrations/000004_groups.up.sql (810B)
// storage/migrations/000005_sessions.down.sql (21B)
// storage/migrations/000005_sessions.up.sql (140B)

package storage

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000002_accountsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\x57\x08\x34\xae\x15\x00\x00\x00")

func _000002_accountsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_accountsDownSql,
		"000002_accounts.down.sql",
	)
}

func _000002_accountsDownSql() (*asset, error) {
	bytes, err := _000002_accountsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_accounts.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0xb6, 0xe4, 0x2b, 0x15, 0x79, 0x16, 0xc3, 0x7d, 0x19, 0x7f, 0x32, 0xb9, 0xed, 0x17, 0x32, 0xa7, 0x8c, 0xc1, 0xca, 0x78, 0x31, 0xb2, 0x14, 0x17, 0x38, 0x83, 0x55, 0x2f, 0xb5, 0x4a, 0x98}}
	return a, nil
}

var __000002_accountsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x41\x6e\xc2\x40\x0c\x45\xf7\x73\x8a\x2f\x56\x20\x35\x5d\x75\xc7\x61\x90\x93\x71\xa8\x55\xc7\x33\x1a\x7b\x20\xb9\x7d\x45\x40\x74\xdb\xad\x9f\xfd\x9e\xa7\xc6\x14\x0c\x5e\x83\xcd\xa5\x18\x64\x86\x95\x00\xaf\xe2\xe1\x38\xf4\x2e\x79\x28\xee\xf5\x70\x4e\x69\x18\x40\xd3\x54\xba\x85\xe3\x9b\x6e\x0c\xa3\x85\x1d\x64\x19\x77\x51\xc5\xc8\xe8\xce\x19\xb5\xc9\x42\x4d\x74\xc3\x5c\x1a\x46\x51\x15\xbb\x7e\xa6\x57\x2b\x68\x54\xfe\x13\x1d\x13\x20\x19\x8f\xd0\xeb\x70\xc3\x0f\x6f\xc8\x3c\x53\xd7\xd8\xc1\xe5\xca\xc6\x8d\x82\x2f\xb7\xaf\xe3\xe9\x23\x61\x2f\x23\x78\x8d\xfd\x5b\xeb\xaa\x8f\xe9\xb3\x90\x11\xb2\xb0\x07\x2d\xf5\x4d\xdf\x3a\x2b\xf7\xa7\xa1\xd7\xfc\xaf\xdd\x74\x3a\xa7\xdf\x00\x00\x00\xff\xff\x0c\x41\xa4\x2b\x26\x01\x00\x00")

func _000002_accountsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_accountsUpSql,
		"000002_accounts.up.sql",
	)
}

func _000002_accountsUpSql() (*asset, error) {
	bytes, err := _000002_accountsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_accounts.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe4, 0xb1, 0x7, 0xd6, 0xef, 0xf3, 0xe0, 0x18, 0x2c, 0x31, 0x90, 0xd5, 0x64, 0x16, 0x42, 0xe5, 0xc2, 0xe3, 0x5d, 0x6e, 0x24, 0x3c, 0xa6, 0x93, 0x3a, 0x54, 0x50, 0xe6, 0x7c, 0x2c, 0x2b, 0xb}}
	return a, nil
}

var __000003_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x89\xcf\x4d\xcd\x4d\x4a\x2d\x2a\xce\xc8\x2c\xb0\xe6\x42\x92\x2e\x2d\x4e\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\x78\xb7\x2d\x81\x31\x00\x00\x00")

func _000003_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_usersDownSql,
		"000003_users.down.sql",
	)
}

func _000003_usersDownSql() (*asset, error) {
	bytes, err := _000003_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_users.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x2a, 0x47, 0xe9, 0x34, 0xf3, 0xbc, 0x63, 0xd9, 0x3f, 0x12, 0xda, 0xc, 0xa5, 0x3c, 0xc3, 0x27, 0x47, 0x13, 0xf8, 0xee, 0x61, 0xf1, 0xff, 0xee, 0xa6, 0x23, 0x66, 0x9c, 0xa5, 0xee, 0x25}}
	return a, nil
}

var __000003_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcb\x8e\x9d\x30\x0c\xdd\xf3\x15\x67\x57\xae\x04\xb3\xea\xae\xff\xd0\x5f\xb8\x32\xc4\x94\xa8\x89\x43\x63\xe7\xde\xf2\xf7\x55\x42\x61\xa6\xed\x54\x9a\x15\xc8\xf6\x79\x70\x0e\xe3\x88\xa2\x9c\x15\x2b\x69\x7b\x83\x97\x25\xe5\x48\xe6\x93\x80\xc4\x61\xcb\xbc\x70\x66\x99\x59\x5f\xba\x39\x33\x19\xc3\x68\x0a\xfc\x1b\xd8\x77\x80\x77\x28\xc5\xd7\x5b\x1f\x29\xef\xf8\xce\x3b\x1c\x2f\x54\x82\xb5\xc5\xfd\x1b\x0b\x67\x32\xbe\x3f\x3e\xf7\xb7\xa1\x03\x84\x22\xc3\xf8\xa7\x41\x92\x41\x4a\x08\x75\xca\x91\x7c\x38\xc6\x45\xfc\x8f\xc2\x7f\x6c\x37\x52\x7d\xa6\xec\xfe\xc5\x1d\xb6\x1c\xcc\x47\x56\xa3\xb8\x5d\xdb\xcb\x86\xa4\xe7\xa1\x5c\x36\xf7\xa1\xdb\xee\xf6\xa5\xeb\xc6\x11\x34\xcf\xa9\x88\xdd\x23\xc7\x89\xb3\xae\x7e\xab\x77\x5e\x58\xf1\x5c\x13\xbc\x62\xa3\x6c\x48\x0b\x48\xce\xe3\x97\x0a\xfc\x9a\x6a\x52\x2b\x19\xbc\x7d\x52\x10\x22\xc9\x3e\x5a\x1a\xeb\x13\x99\x43\xcb\xb8\x12\x0e\xd0\x84\x24\x47\xa2\x98\x49\x30\x31\xe8\xe2\x8d\x25\x98\xdf\x02\x9f\xec\x3a\x34\x5f\xe2\xde\x28\x36\x54\x9f\xa6\x87\x4f\x45\xc3\x7e\xc3\x4a\x0f\x6e\x8a\x47\x4d\x7f\x55\xf7\xce\x47\xd5\x1e\xcf\xf1\xd9\xe7\x6b\xf5\x97\x76\xef\xdd\x0d\x49\xe0\x38\xb0\x31\x66\xd2\x99\x1c\xb7\x60\x95\xf3\x7b\xc8\xa6\xff\x7f\xd8\xdb\x7f\xa6\x7f\x35\x30\x9c\x7c\xad\x88\x5f\x01\x00\x00\xff\xff\x80\xe6\x0b\x57\xa7\x02\x00\x00")

func _000003_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_usersUpSql,
		"000003_users.up.sql",
	)
}

func _000003_usersUpSql() (*asset, error) {
	bytes, err := _000003_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_users.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x12, 0xe3, 0xed, 0x8e, 0xcd, 0x58, 0x6b, 0xf3, 0xbf, 0xba, 0x19, 0x92, 0x77, 0x45, 0x4, 0x16, 0x89, 0xb2, 0x5a, 0x2a, 0x6, 0xe4, 0xae, 0x2f, 0xdd, 0x51, 0xd6, 0xc6, 0xa0, 0x5f, 0x8a}}
	return a, nil
}

var __000004_groupsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x2f\xca\x2f\x2d\x88\xcf\x4d\xcd\x4d\x4a\x2d\x2a\xce\xc8\x2c\xb0\xe6\xc2\x90\xcc\x2f\xcf\xc3\x25\x57\x6c\xcd\x05\x08\x00\x00\xff\xff\x4f\xe5\x6c\xb6\x4c\x00\x00\x00")

func _000004_groupsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_groupsDownSql,
		"000004_groups.down.sql",
	)
}

func _000004_groupsDownSql() (*asset, error) {
	bytes, err := _000004_groupsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_groups.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0xda, 0xed, 0xb3, 0x3a, 0x6a, 0x65, 0x4b, 0x42, 0x2d, 0xc, 0x75, 0xb8, 0xa1, 0x0, 0x78, 0x63, 0x7, 0xcc, 0xe6, 0x9d, 0xf6, 0xf3, 0x66, 0xee, 0xe8, 0x96, 0xa5, 0x68, 0x8f, 0x11, 0x33}}
	return a, nil
}

var __000004_groupsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xc1\x72\xa3\x30\x10\x44\xef\x7c\x45\xdf\x8c\xab\xcc\x9e\xf6\xb6\xff\xb0\xbf\x40\x0d\xa8\x31\xda\x05\x89\x92\x06\x13\xff\x7d\x4a\xc2\xd8\x4e\x62\x57\x5c\xb9\x6a\x7a\xa6\x7b\xde\xa8\xaa\x70\x0c\x7e\x9e\x22\x7c\x87\x39\x32\x44\x48\x20\x9c\x8c\x34\x10\x67\xd0\xcb\x89\x10\x44\xb6\x81\x0a\xed\x45\x77\x31\x09\x0d\xd4\xe3\x9f\xb7\x0e\xda\x73\x9d\xf1\xab\x68\x03\x45\x09\x95\x66\xe0\x36\xb7\x2c\x00\x6b\x30\xcf\xd6\x60\x0a\x76\x94\x70\xc6\x7f\x9e\x61\xd8\xc9\x3c\x68\x2e\xd4\x47\x3a\x06\x51\xd6\xa7\xdf\xe5\xfe\x50\x20\x07\x80\xf2\x4d\xe1\xbc\xc2\xcd\xc3\x90\x5e\xad\x3b\x59\x15\xb5\xde\xd5\x97\x40\xcd\x59\x29\x1f\x34\x6b\x06\x03\xb5\x23\xa3\xca\x38\x5d\xab\x57\x4b\xe7\x97\xd5\x65\x9e\xcc\x4b\xda\x62\xff\xa7\x28\x36\x54\xf5\xc8\xb1\x61\x88\xbd\x9d\x92\xca\x3a\x46\x2c\xbd\xdf\x45\x4c\x12\x34\x71\x94\xe7\x3c\xee\x9b\x13\x99\xf5\x71\xe3\x13\xd8\x31\xd0\xb5\x8c\x17\x7a\xa5\x35\x7b\x78\x07\xc3\x81\x4a\xb4\x12\x5b\x31\xcc\xd1\x23\xc3\xa3\xbe\x7c\xc3\xe7\x6d\xf7\x17\x28\x37\xf3\xc3\x36\xed\xd3\xa2\x7e\x71\x5f\xf7\x84\x5f\x5c\xbc\xad\x58\x55\xf8\xeb\xd3\x8e\xbd\x28\x24\x0f\x42\x2b\x2e\x71\x6c\x78\x09\x60\x60\xbb\xfc\x4d\x72\xd5\x5e\xbb\x91\x0d\x1e\x62\xba\x59\x27\x4a\x3f\xc7\xf4\x3d\xa7\xac\x7a\x01\xcb\x7b\x00\x00\x00\xff\xff\x85\x1e\x4a\xb0\x2a\x03\x00\x00")

func _000004_groupsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_groupsUpSql,
		"000004_groups.up.sql",
	)
}

func _000004_groupsUpSql() (*asset, error) {
	bytes, err := _000004_groupsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_groups.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x96, 0xe7, 0xa8, 0x9a, 0x10, 0x2e, 0xdd, 0x4a, 0xd1, 0x7d, 0xf, 0x42, 0x23, 0x31, 0xc4, 0x9d, 0x32, 0x65, 0x60, 0x32, 0x2a, 0xd4, 0x5a, 0x95, 0x6a, 0xbe, 0x3b, 0x57, 0x8d, 0xcd, 0xff, 0xb1}}
	return a, nil
}

var __000005_sessionsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x28\x4e\x2d\x2e\xce\xcc\xcf\x2b\xb6\xe6\x02\x04\x00\x00\xff\xff\x32\xbb\x60\x54\x15\x00\x00\x00")

func _000005_sessionsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_sessionsDownSql,
		"000005_sessions.down.sql",
	)
}

func _000005_sessionsDownSql() (*asset, error) {
	bytes, err := _000005_sessionsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_sessions.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0xf4, 0xe5, 0x31, 0x70, 0x9, 0x89, 0x17, 0xa, 0x33, 0xb8, 0x17, 0x3d, 0x6e, 0x64, 0xcc, 0xf8, 0xab, 0x55, 0xe9, 0x7b, 0x85, 0x2b, 0xc, 0x99, 0x1, 0x83, 0x85, 0x4c, 0x17, 0x96, 0xfc}}
	return a, nil
}

var __000005_sessionsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\x41\x0a\xc2\x30\x14\x84\xe1\xfd\x3b\xc5\x2c\x2d\x78\x83\x9e\xe6\xd5\xce\x22\x34\x79\x09\xc9\x08\xc9\xed\x45\x14\x71\x3b\xc3\xcf\xf7\xe8\x74\x11\xf2\x23\x13\x83\x63\xa4\x1a\x03\x37\x03\x54\x2f\x06\xc4\x29\xb4\x9e\x8a\xf7\x85\x8b\xeb\x6e\xc0\xe9\x72\x1c\x4b\x74\x44\x15\xe2\x99\xf3\x7b\xe6\x6c\xa9\x2f\x28\x15\x0e\x79\x69\xbf\xd3\xb6\xdd\xec\x0b\xa5\x38\x39\x51\xe3\xcf\xfa\x74\xdb\x6e\xaf\x00\x00\x00\xff\xff\xa8\xc5\x9b\xcf\x8c\x00\x00\x00")

func _000005_sessionsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_sessionsUpSql,
		"000005_sessions.up.sql",
	)
}

func _000005_sessionsUpSql() (*asset, error) {
	bytes, err := _000005_sessionsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_sessions.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x6e, 0xc1, 0x20, 0xdb, 0xf4, 0x6, 0x8, 0x90, 0x7c, 0x91, 0x98, 0xbc, 0xe, 0x81, 0x1e, 0xd3, 0x3f, 0x62, 0x29, 0x3a, 0xf7, 0x86, 0x7e, 0xa7, 0xf1, 0x6d, 0x53, 0xa5, 0xae, 0xa3, 0xbd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000002_accounts.down.sql": _000002_accountsDownSql,
	"000002_accounts.up.sql":   _000002_accountsUpSql,
	"000003_users.down.sql":    _000003_usersDownSql,
	"000003_users.up.sql":      _000003_usersUpSql,
	"000004_groups.down.sql":   _000004_groupsDownSql,
	"000004_groups.up.sql":     _000004_groupsUpSql,
	"000005_sessions.down.sql": _000005_sessionsDownSql,
	"000005_sessions.up.sql":   _000005_sessionsUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000002_accounts.down.sql": &bintree{_000002_accountsDownSql, map[string]*bintree{}},
	"000002_accounts.up.sql":   &bintree{_000002_accountsUpSql, map[string]*bintree{}},
	"000003_users.down.sql":    &bintree{_000003_usersDownSql, map[string]*bintree{}},
	"000003_users.up.sql":      &bintree{_000003_usersUpSql, map[string]*bintree{}},
	"000004_groups.down.sql":   &bintree{_000004_groupsDownSql, map[string]*bintree{}},
	"000004_groups.up.sql":     &bintree{_000004_groupsUpSql, map[string]*bintree{}},
	"000005_sessions.down.sql": &bintree{_000005_sessionsDownSql, map[string]*bintree{}},
	"000005_sessions.up.sql":   &bintree{_000005_sessionsUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
