// Code generated by go-bindata. DO NOT EDIT.
// sources:
// storage/migrations/000001_noop.down.sql (17B)
// storage/migrations/000001_noop.up.sql (17B)
// storage/migrations/000002_accounts.down.sql (21B)
// storage/migrations/000002_accounts.up.sql (284B)
// storage/migrations/000003_users.down.sql (49B)
// storage/migrations/000003_users.up.sql (847B)
// storage/migrations/000004_groups.down.sql (76B)
// storage/migrations/000004_groups.up.sql (860B)

package storage

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_noopDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\x70\xc9\x4f\x2d\x56\xc8\xcb\x2f\xc9\xc8\xcc\x4b\xd7\xe3\x02\x04\x00\x00\xff\xff\xe1\x05\xc3\x02\x11\x00\x00\x00")

func _000001_noopDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_noopDownSql,
		"000001_noop.down.sql",
	)
}

func _000001_noopDownSql() (*asset, error) {
	bytes, err := _000001_noopDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_noop.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0xc6, 0xf5, 0x1e, 0x94, 0x3f, 0x4b, 0x91, 0x1c, 0x67, 0xe0, 0x7a, 0x1, 0x49, 0xb9, 0x4e, 0x4a, 0x68, 0xba, 0x6b, 0xee, 0x3a, 0xfb, 0x1a, 0x27, 0x6c, 0xc0, 0x55, 0xf2, 0x13, 0x47, 0xca}}
	return a, nil
}

var __000001_noopUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\x70\xc9\x4f\x2d\x56\xc8\xcb\x2f\xc9\xc8\xcc\x4b\xd7\xe3\x02\x04\x00\x00\xff\xff\xe1\x05\xc3\x02\x11\x00\x00\x00")

func _000001_noopUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_noopUpSql,
		"000001_noop.up.sql",
	)
}

func _000001_noopUpSql() (*asset, error) {
	bytes, err := _000001_noopUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_noop.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0xc6, 0xf5, 0x1e, 0x94, 0x3f, 0x4b, 0x91, 0x1c, 0x67, 0xe0, 0x7a, 0x1, 0x49, 0xb9, 0x4e, 0x4a, 0x68, 0xba, 0x6b, 0xee, 0x3a, 0xfb, 0x1a, 0x27, 0x6c, 0xc0, 0x55, 0xf2, 0x13, 0x47, 0xca}}
	return a, nil
}

var __000002_accountsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\x57\x08\x34\xae\x15\x00\x00\x00")

func _000002_accountsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_accountsDownSql,
		"000002_accounts.down.sql",
	)
}

func _000002_accountsDownSql() (*asset, error) {
	bytes, err := _000002_accountsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_accounts.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0xb6, 0xe4, 0x2b, 0x15, 0x79, 0x16, 0xc3, 0x7d, 0x19, 0x7f, 0x32, 0xb9, 0xed, 0x17, 0x32, 0xa7, 0x8c, 0xc1, 0xca, 0x78, 0x31, 0xb2, 0x14, 0x17, 0x38, 0x83, 0x55, 0x2f, 0xb5, 0x4a, 0x98}}
	return a, nil
}

var __000002_accountsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8d\x41\x4e\xc3\x40\x0c\x45\xf7\x73\x8a\xbf\x6c\x25\xca\x05\x38\x4c\xe4\xcc\xb8\xc1\xc2\xe3\x89\x3c\x36\x28\xb7\x47\xa5\x22\xec\xd9\x7e\xbd\xff\xde\xed\x06\xaa\x75\xa4\xc5\xc4\x3b\x7d\x32\x8c\x3a\x4f\x90\x35\x7c\x89\x2a\x56\x46\x4e\x6e\xd8\x5d\x3a\xb9\xe8\x81\xfb\x70\xac\xa2\x2a\xb6\xbd\x96\xea\x4c\xc1\x08\x5a\x95\xff\x44\x97\x02\x48\x43\xa6\xfc\x1e\x0f\x7c\xf0\x81\xc6\x77\x4a\x0d\x6c\x6c\x8b\x93\xb5\xd1\x97\x07\x73\xb9\xbe\x14\xfc\x84\x31\xc3\xc5\x36\xd8\x08\x58\xaa\x3e\xf6\x67\xa2\x2d\x14\x08\xe9\x3c\x83\xfa\x7e\x02\xa7\xb2\xa6\x3b\x5b\x2c\x27\xf2\x94\xe6\xde\xfe\x77\x2e\xd7\xb7\xf2\x1d\x00\x00\xff\xff\xd1\x4c\xed\xd6\x1c\x01\x00\x00")

func _000002_accountsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_accountsUpSql,
		"000002_accounts.up.sql",
	)
}

func _000002_accountsUpSql() (*asset, error) {
	bytes, err := _000002_accountsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_accounts.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0x1d, 0x69, 0xb5, 0x5c, 0xdc, 0xbf, 0xd9, 0xd3, 0x98, 0xc9, 0xf6, 0xab, 0x7b, 0xd0, 0x5, 0xad, 0x6f, 0x21, 0x4c, 0x9a, 0x65, 0x2, 0xdd, 0x6, 0x2b, 0x42, 0x2b, 0x33, 0x30, 0x4, 0x47}}
	return a, nil
}

var __000003_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x89\xcf\x4d\xcd\x4d\x4a\x2d\x2a\xce\xc8\x2c\xb0\xe6\x42\x92\x2e\x2d\x4e\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\x78\xb7\x2d\x81\x31\x00\x00\x00")

func _000003_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_usersDownSql,
		"000003_users.down.sql",
	)
}

func _000003_usersDownSql() (*asset, error) {
	bytes, err := _000003_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_users.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x2a, 0x47, 0xe9, 0x34, 0xf3, 0xbc, 0x63, 0xd9, 0x3f, 0x12, 0xda, 0xc, 0xa5, 0x3c, 0xc3, 0x27, 0x47, 0x13, 0xf8, 0xee, 0x61, 0xf1, 0xff, 0xee, 0xa6, 0x23, 0x66, 0x9c, 0xa5, 0xee, 0x25}}
	return a, nil
}

var __000003_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x41\x93\xd3\x30\x0c\x85\xef\xf9\x15\xef\xd6\x74\xa6\xd9\x3f\xc0\x91\xe1\xca\x89\x7b\x46\x89\xd5\xc6\x60\xcb\xc1\x92\x77\xa7\x30\xfc\x77\xc6\x2e\x29\x85\x0d\x1c\xf6\x94\x8c\xfd\xbd\x27\x59\x7a\xc3\x80\xa2\x9c\x15\x0b\x69\xfb\x83\x97\x73\xca\x91\xcc\x27\x01\x89\xc3\x9a\xf9\xcc\x99\x65\x66\x7d\xea\xe6\xcc\x64\x0c\xa3\x29\xf0\x2f\x61\xdf\x01\xde\xa1\x14\x5f\x59\x1f\x29\x5f\xf1\x85\xaf\x70\x7c\xa6\x12\x0c\x17\x96\x31\x93\xb8\x14\xc7\xca\xf4\xc7\x53\x07\x08\x45\x86\x5a\xf6\x72\x81\x24\x83\x94\x10\xea\x39\x47\xf2\x61\xbb\x28\xe2\xbf\x16\xfe\xe3\x7e\x25\xd5\x97\x94\xdd\x9e\x36\x90\x5c\x0a\x5d\x5e\xf9\xde\x3b\x39\xb0\x0c\x45\x0f\x95\x35\x1f\xf9\x5b\x92\xff\xb0\xef\x3f\x7c\x6a\xe4\xc3\xf3\xf1\x59\x93\x4c\x3b\xec\xf7\x1f\x0d\xbd\x0d\xc7\x8d\x64\xcd\x5f\x8d\xe2\xfa\x9a\x9e\x4b\xce\x2c\x36\xde\x91\xdb\x44\xca\xea\xde\x26\xee\x8e\xef\xba\x6e\x18\x40\xf3\x9c\x8a\xd8\x18\x39\x4e\x9c\x75\xf1\x6b\x55\x79\x61\xc5\xcb\x92\xe0\x15\x2b\x65\x43\x3a\x83\x64\x83\x9f\xaa\xf0\x63\xaa\x1b\x5d\xc8\xe0\xed\xa0\x20\x44\x92\xeb\x60\x69\xa8\x5f\x64\x0e\x2d\x0b\xd5\xf0\x04\x4d\xa8\x53\x6b\x41\x99\x49\x30\x31\xe8\xee\x1b\x4b\x30\xbf\x06\xde\xdc\xf5\xd4\xfa\x12\xf7\x50\xb1\xa9\xfa\x34\x3d\xfb\x54\x34\x5c\x8f\x58\xe8\x99\x5b\xc5\x5b\x9c\xfe\x8a\xd8\xce\xa3\x6a\xde\xb6\xe3\x2d\x77\x0f\x3b\xda\x6a\xf7\xde\x1d\x91\x04\x8e\x03\x1b\x63\x26\x9d\xc9\x71\x9b\xb4\x72\xde\x53\xb6\xfa\xff\x96\x3d\x66\xbb\xff\xdd\xc0\x69\xf3\x6b\x8b\xf8\x19\x00\x00\xff\xff\x81\x07\x71\xa0\x4f\x03\x00\x00")

func _000003_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_usersUpSql,
		"000003_users.up.sql",
	)
}

func _000003_usersUpSql() (*asset, error) {
	bytes, err := _000003_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_users.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0x73, 0x76, 0xa, 0xcb, 0x8c, 0x3a, 0xa8, 0xa6, 0x82, 0x89, 0xd0, 0xe1, 0xd8, 0xbd, 0x1b, 0x20, 0x2, 0x23, 0x24, 0xaa, 0xd8, 0x8d, 0xd4, 0x1, 0x4, 0x77, 0x77, 0xe3, 0xd4, 0xa1, 0x52}}
	return a, nil
}

var __000004_groupsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x2f\xca\x2f\x2d\x88\xcf\x4d\xcd\x4d\x4a\x2d\x2a\xce\xc8\x2c\xb0\xe6\xc2\x90\xcc\x2f\xcf\xc3\x25\x57\x6c\xcd\x05\x08\x00\x00\xff\xff\x4f\xe5\x6c\xb6\x4c\x00\x00\x00")

func _000004_groupsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_groupsDownSql,
		"000004_groups.down.sql",
	)
}

func _000004_groupsDownSql() (*asset, error) {
	bytes, err := _000004_groupsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_groups.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0xda, 0xed, 0xb3, 0x3a, 0x6a, 0x65, 0x4b, 0x42, 0x2d, 0xc, 0x75, 0xb8, 0xa1, 0x0, 0x78, 0x63, 0x7, 0xcc, 0xe6, 0x9d, 0xf6, 0xf3, 0x66, 0xee, 0xe8, 0x96, 0xa5, 0x68, 0x8f, 0x11, 0x33}}
	return a, nil
}

var __000004_groupsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xc1\x6e\xb3\x40\x0c\x84\xef\x3c\xc5\xdc\x42\xa4\xf0\x9f\xfe\x5b\xdf\xa1\xaf\x80\x0c\x6b\xc2\xb6\xe0\x45\x5e\x6f\xa2\xbc\x7d\xb5\x10\x48\xd4\x24\x52\x55\xa9\xd7\xc5\x33\xe3\xf9\x4c\x55\xe1\xa8\x21\x4d\x11\xa1\x43\x8a\xac\x11\xa4\x0c\xa1\x91\x1d\x48\x1c\x7a\x3a\x31\x08\x91\x5b\x65\x83\xf5\x64\xbb\x98\x07\x1d\x2c\xe0\x23\x78\x81\xf5\xbc\x78\xfc\x2b\x5a\x65\x32\x86\x51\x33\xf0\xea\x5b\x16\x80\x77\x48\xc9\x3b\x4c\xea\x47\xd2\x0b\x3e\xf9\x02\xc7\x1d\xa5\xc1\x70\x64\xa9\x95\xc4\x85\xb1\xce\x33\xe5\xfe\x50\x60\xce\x47\x34\xf5\x72\x84\x04\x83\xa4\x61\xc8\xef\x5e\x4e\xde\xc8\x7c\x90\xfa\xba\x51\x73\x31\x8e\xdb\xcc\xe6\x9a\xad\xea\xd3\xff\xc5\x6d\x59\xcb\xd5\x64\x30\x3f\x72\x34\x1a\xa7\x47\x49\x9b\x54\x59\xac\xde\x46\x16\x71\x9a\xdc\xef\xc4\xc5\xfe\xad\x28\x56\xbe\xf5\xc8\x63\xc3\x1a\x7b\x3f\x65\x8d\x17\x8e\x38\xf7\x61\x17\x31\x91\x5a\x86\x4f\xaf\x21\xde\x8b\x33\xce\xe5\x71\x85\xaa\xdc\xb1\xb2\xb4\x1c\xaf\xc8\x4b\xef\xf6\x08\x02\xc7\x03\x1b\xa3\xa5\xd8\x92\xe3\xb9\x4b\x64\x7d\xa6\x9b\x0f\xff\x5a\x76\x7f\xb6\x72\x0d\x3f\xac\x6e\xdf\x8a\x86\xb3\x3c\xf6\x44\x38\x4b\xbc\x55\xac\x2a\xbc\x87\xdc\xb1\x27\x03\xcd\x46\x68\x49\x32\xd5\x86\xaf\x0b\x38\xf8\x6e\xfe\xb7\xe6\xaf\x7e\x53\x63\x0e\x78\x8a\xe9\x16\xfd\xb7\x94\x7e\xc8\xe4\x2b\x00\x00\xff\xff\x51\x01\xfe\xc1\x5c\x03\x00\x00")

func _000004_groupsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_groupsUpSql,
		"000004_groups.up.sql",
	)
}

func _000004_groupsUpSql() (*asset, error) {
	bytes, err := _000004_groupsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_groups.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0xc5, 0x68, 0xca, 0xf7, 0xa0, 0x55, 0xea, 0x82, 0xc5, 0xbd, 0x63, 0x6b, 0x66, 0x1a, 0xbe, 0x84, 0x92, 0x75, 0x5f, 0x4a, 0xcf, 0x4e, 0x77, 0x27, 0xc9, 0xab, 0xd2, 0x4f, 0xb4, 0xfc, 0xc1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_noop.down.sql":     _000001_noopDownSql,
	"000001_noop.up.sql":       _000001_noopUpSql,
	"000002_accounts.down.sql": _000002_accountsDownSql,
	"000002_accounts.up.sql":   _000002_accountsUpSql,
	"000003_users.down.sql":    _000003_usersDownSql,
	"000003_users.up.sql":      _000003_usersUpSql,
	"000004_groups.down.sql":   _000004_groupsDownSql,
	"000004_groups.up.sql":     _000004_groupsUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_noop.down.sql":     &bintree{_000001_noopDownSql, map[string]*bintree{}},
	"000001_noop.up.sql":       &bintree{_000001_noopUpSql, map[string]*bintree{}},
	"000002_accounts.down.sql": &bintree{_000002_accountsDownSql, map[string]*bintree{}},
	"000002_accounts.up.sql":   &bintree{_000002_accountsUpSql, map[string]*bintree{}},
	"000003_users.down.sql":    &bintree{_000003_usersDownSql, map[string]*bintree{}},
	"000003_users.up.sql":      &bintree{_000003_usersUpSql, map[string]*bintree{}},
	"000004_groups.down.sql":   &bintree{_000004_groupsDownSql, map[string]*bintree{}},
	"000004_groups.up.sql":     &bintree{_000004_groupsUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
