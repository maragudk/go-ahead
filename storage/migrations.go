// Code generated by go-bindata. DO NOT EDIT.
// sources:
// storage/migrations/000002_accounts.down.sql (21B)
// storage/migrations/000002_accounts.up.sql (292B)
// storage/migrations/000003_users.down.sql (49B)
// storage/migrations/000003_users.up.sql (678B)
// storage/migrations/000004_groups.down.sql (76B)
// storage/migrations/000004_groups.up.sql (809B)
// storage/migrations/000005_sessions.down.sql (21B)
// storage/migrations/000005_sessions.up.sql (140B)

package storage

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000002_accountsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\x57\x08\x34\xae\x15\x00\x00\x00")

func _000002_accountsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_accountsDownSql,
		"000002_accounts.down.sql",
	)
}

func _000002_accountsDownSql() (*asset, error) {
	bytes, err := _000002_accountsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_accounts.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0xb6, 0xe4, 0x2b, 0x15, 0x79, 0x16, 0xc3, 0x7d, 0x19, 0x7f, 0x32, 0xb9, 0xed, 0x17, 0x32, 0xa7, 0x8c, 0xc1, 0xca, 0x78, 0x31, 0xb2, 0x14, 0x17, 0x38, 0x83, 0x55, 0x2f, 0xb5, 0x4a, 0x98}}
	return a, nil
}

var __000002_accountsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x41\x6e\x02\x31\x0c\x45\xf7\x39\xc5\x17\x2b\x90\x4a\x2f\xc0\x61\x90\x27\xf1\x4c\xad\x3a\x4e\x94\x38\x65\x72\xfb\x0a\x68\xe9\xb6\x5b\xfb\xf9\x3d\xc7\xc6\xe4\x0c\xde\x9d\xad\x4b\x31\xc8\x0a\x2b\x0e\xde\xa5\x7b\xc7\xa1\x6e\xb1\xcd\xea\xe5\x70\x09\xe1\x7c\x06\xc5\x58\x86\x79\xc7\x07\x7d\x31\x8c\x32\x77\x90\x25\xdc\x44\x15\x0b\x63\x74\x4e\xa8\x4d\x32\x35\xd1\x89\xb5\x34\x2c\xa2\x2a\xb6\xbd\x87\x9f\x94\xd3\xa2\xfc\x27\x3a\x06\x40\x12\xc6\x90\xdf\xc3\x89\x4f\x9e\x48\xbc\xd2\x50\xc7\xc6\x76\x6d\x64\xa9\xe4\xeb\x9d\x39\x9e\xde\x02\x1e\x61\x38\xef\xfe\xf8\xd5\x86\xea\x7d\xfa\x0c\x24\xb8\x64\xee\x4e\xb9\xbe\xb6\x2f\x9b\x95\xdb\xd3\x30\x6a\xfa\x17\x1b\x4e\x97\xf0\x1d\x00\x00\xff\xff\x09\x27\xee\x4d\x24\x01\x00\x00")

func _000002_accountsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_accountsUpSql,
		"000002_accounts.up.sql",
	)
}

func _000002_accountsUpSql() (*asset, error) {
	bytes, err := _000002_accountsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_accounts.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa4, 0xfd, 0x2b, 0x96, 0x57, 0x71, 0x29, 0x63, 0x6f, 0xb9, 0x58, 0xa, 0x7a, 0x3a, 0xdb, 0x10, 0xe9, 0x79, 0x30, 0x15, 0x23, 0xb6, 0x65, 0x4c, 0x55, 0xa8, 0x9e, 0xb, 0xc, 0x5c, 0x98, 0xef}}
	return a, nil
}

var __000003_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x89\xcf\x4d\xcd\x4d\x4a\x2d\x2a\xce\xc8\x2c\xb0\xe6\x42\x92\x2e\x2d\x4e\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\x78\xb7\x2d\x81\x31\x00\x00\x00")

func _000003_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_usersDownSql,
		"000003_users.down.sql",
	)
}

func _000003_usersDownSql() (*asset, error) {
	bytes, err := _000003_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_users.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x2a, 0x47, 0xe9, 0x34, 0xf3, 0xbc, 0x63, 0xd9, 0x3f, 0x12, 0xda, 0xc, 0xa5, 0x3c, 0xc3, 0x27, 0x47, 0x13, 0xf8, 0xee, 0x61, 0xf1, 0xff, 0xee, 0xa6, 0x23, 0x66, 0x9c, 0xa5, 0xee, 0x25}}
	return a, nil
}

var __000003_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x41\x8e\xdc\x30\x0c\xbb\xe7\x15\xbc\x35\x03\x4c\xf6\x03\xfd\x43\xbf\x30\xd0\xc4\x9a\xc6\xa8\x2d\xa5\x96\xbc\xd3\xfc\xbe\xb0\xd3\x64\xb7\xed\x16\xe8\x29\x81\x44\x8a\x0c\x99\x69\x42\x35\x2e\x86\x85\xac\xbf\x21\xca\x43\x4b\x26\x8f\x2a\x20\x09\x58\x0b\x3f\xb8\xb0\xcc\x6c\x2f\xc3\x5c\x98\x9c\xe1\x74\x4f\xfc\x8b\x38\x0e\x40\x0c\xa8\x35\x36\x6c\xcc\x54\x36\x7c\xe3\x0d\x81\x1f\x54\x93\xe3\x2b\xcb\xad\x90\x04\xcd\xb7\x86\x19\x2f\xd7\x01\x10\xca\x0c\xe7\x1f\x0e\x51\x87\xd4\x94\xda\x94\x33\xc5\xb4\x8f\xab\xc4\xef\x95\x7f\xdb\xae\x64\xf6\xd4\x12\xfe\xe6\xed\xae\x02\x3c\x66\x36\xa7\xbc\x9e\xdb\xd3\x85\xe8\x73\x57\xae\x6b\xf8\x2f\xec\x70\xf9\x3c\x0c\xd3\x04\x9a\x67\xad\xe2\xb7\xcc\xf9\xce\xc5\x96\xb8\x36\x5c\x14\x36\x3c\x17\x45\x34\xac\x54\x1c\xfa\x00\xc9\x01\x7e\x69\xc4\x2f\xda\x82\x5a\xc8\x11\xfd\x93\x81\x90\x49\xb6\xc9\x75\x6a\x4f\x14\x4e\x3d\xe2\x76\xf0\x0a\x53\xa8\xec\x81\x62\x26\xc1\x9d\x41\xe7\xdd\x5c\x93\xc7\x35\xf1\x71\xdd\xae\xdd\x97\x84\x77\x8a\x9d\x35\xea\xfd\x35\x6a\xb5\xb4\x5d\xb0\xd0\x2b\x77\xc5\xbd\xa5\x3f\x9a\xfb\xe0\xa3\x5a\x8d\xc7\xf8\xa8\xf3\xad\xf9\x53\x7b\x8c\xe1\x02\x15\x04\x4e\xec\x8c\x99\x6c\xa6\xc0\x3d\x58\xe3\xf2\x11\xb3\xeb\xff\x9b\xf6\xfe\x97\x19\xdf\x0c\x5c\x8f\x7b\xbd\x88\x9f\x01\x00\x00\xff\xff\x18\x82\x9f\x38\xa6\x02\x00\x00")

func _000003_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_usersUpSql,
		"000003_users.up.sql",
	)
}

func _000003_usersUpSql() (*asset, error) {
	bytes, err := _000003_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_users.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x63, 0xb7, 0xb2, 0x9a, 0x6a, 0x1, 0xc5, 0x8, 0x62, 0x3b, 0xb, 0x11, 0x7a, 0x69, 0x2c, 0xa4, 0xef, 0x55, 0xc7, 0xa6, 0x37, 0xc, 0x9c, 0x3a, 0xdf, 0x13, 0xff, 0xa, 0x1e, 0x59, 0xf6}}
	return a, nil
}

var __000004_groupsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x2f\xca\x2f\x2d\x88\xcf\x4d\xcd\x4d\x4a\x2d\x2a\xce\xc8\x2c\xb0\xe6\xc2\x90\xcc\x2f\xcf\xc3\x25\x57\x6c\xcd\x05\x08\x00\x00\xff\xff\x4f\xe5\x6c\xb6\x4c\x00\x00\x00")

func _000004_groupsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_groupsDownSql,
		"000004_groups.down.sql",
	)
}

func _000004_groupsDownSql() (*asset, error) {
	bytes, err := _000004_groupsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_groups.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0xda, 0xed, 0xb3, 0x3a, 0x6a, 0x65, 0x4b, 0x42, 0x2d, 0xc, 0x75, 0xb8, 0xa1, 0x0, 0x78, 0x63, 0x7, 0xcc, 0xe6, 0x9d, 0xf6, 0xf3, 0x66, 0xee, 0xe8, 0x96, 0xa5, 0x68, 0x8f, 0x11, 0x33}}
	return a, nil
}

var __000004_groupsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x51\x72\xe2\x30\x10\x44\xff\x7d\x8a\xfe\xc3\x54\xe1\xbd\xc0\xde\x61\xaf\xe0\x1a\x5b\x63\xac\x8d\x35\x72\x49\x23\x1c\x6e\x9f\x92\x8c\x81\x24\x50\xa1\xf2\x2b\xf5\x4c\x77\x3f\xa9\x69\x70\x0c\x3e\xcd\x11\x7e\x40\x8a\x1c\x22\x28\x30\x84\x1c\x1b\x90\x18\x8c\x74\x62\x10\x22\xf7\x81\x15\x3a\x92\xee\x62\x16\x1a\xa8\xc7\x7f\x6f\x05\x3a\xf2\xba\xe3\x4f\xd5\x07\x26\x65\x28\x75\x13\x6f\x7b\xeb\x0a\xb0\x06\x29\x59\x83\x39\x58\x47\xe1\x8c\x37\x3e\xc3\xf0\x40\x69\x52\x1c\x59\xda\x40\x62\xbc\x6b\xb3\xa6\xde\x1f\x2a\x14\x7f\x28\xbf\x2b\xc4\x2b\x24\x4d\x53\x3e\xb5\x72\xb2\x4a\x6a\xbd\xb4\x97\x3c\xdd\x59\x99\x3e\x69\xd6\x08\x06\x6a\x1d\x47\x25\x37\x5f\x6f\xaf\x8e\xe2\x97\xd5\x25\xcd\xe6\x25\x6d\xb5\xff\x5b\x55\x1b\xa9\xd6\xb1\xeb\x38\xc4\xd1\xce\x59\x65\x85\x23\x96\xd1\xef\x22\x66\x0a\x9a\x31\xd2\x73\x1c\xf7\xc3\x19\xcc\x7a\xb8\xe1\x09\x3c\x70\x60\xe9\x39\x5e\xe0\xd5\xd6\xec\xe1\x05\x86\x27\x56\x46\x4f\xb1\x27\xc3\x25\x7a\xe4\xf0\x68\xae\x3c\xe1\xf3\xb1\xfb\x07\xa8\x37\xf3\xc3\xb6\xed\x4b\x51\xbf\xc8\xf7\x9e\xf0\x8b\xc4\x5b\xc5\xa6\xc1\x3f\x9f\x3b\x8e\xa4\xa0\xb2\x08\x3d\x49\xe6\xd8\xf1\x25\x80\x81\x1d\xca\x2f\x29\xb7\xf6\x3a\x8d\x62\xf0\x10\xd3\xcd\x3a\x53\xfa\x3d\xa6\x9f\x39\x15\xd5\x0b\x58\x3e\x02\x00\x00\xff\xff\xdc\x9d\x9d\x96\x29\x03\x00\x00")

func _000004_groupsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_groupsUpSql,
		"000004_groups.up.sql",
	)
}

func _000004_groupsUpSql() (*asset, error) {
	bytes, err := _000004_groupsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_groups.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x90, 0x9d, 0xc, 0xbe, 0x12, 0x9a, 0xbf, 0x91, 0x20, 0xac, 0xc7, 0xd5, 0xea, 0xc, 0x78, 0x63, 0xae, 0x7, 0x65, 0x1b, 0xb6, 0x52, 0x52, 0x47, 0xac, 0x6c, 0xcd, 0xa4, 0x39, 0x45, 0x91, 0x8a}}
	return a, nil
}

var __000005_sessionsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x28\x4e\x2d\x2e\xce\xcc\xcf\x2b\xb6\xe6\x02\x04\x00\x00\xff\xff\x32\xbb\x60\x54\x15\x00\x00\x00")

func _000005_sessionsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_sessionsDownSql,
		"000005_sessions.down.sql",
	)
}

func _000005_sessionsDownSql() (*asset, error) {
	bytes, err := _000005_sessionsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_sessions.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0xf4, 0xe5, 0x31, 0x70, 0x9, 0x89, 0x17, 0xa, 0x33, 0xb8, 0x17, 0x3d, 0x6e, 0x64, 0xcc, 0xf8, 0xab, 0x55, 0xe9, 0x7b, 0x85, 0x2b, 0xc, 0x99, 0x1, 0x83, 0x85, 0x4c, 0x17, 0x96, 0xfc}}
	return a, nil
}

var __000005_sessionsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\x41\x0a\xc2\x30\x14\x84\xe1\xfd\x3b\xc5\x2c\x2d\x78\x83\x9e\xe6\xd5\xce\x22\x34\x79\x09\xc9\x08\xc9\xed\x45\x14\x71\x3b\xc3\xcf\xf7\xe8\x74\x11\xf2\x23\x13\x83\x63\xa4\x1a\x03\x37\x03\x54\x2f\x06\xc4\x29\xb4\x9e\x8a\xf7\x85\x8b\xeb\x6e\xc0\xe9\x72\x1c\x4b\x74\x44\x15\xe2\x99\xf3\x7b\xe6\x6c\xa9\x2f\x28\x15\x0e\x79\x69\xbf\xd3\xb6\xdd\xec\x0b\xa5\x38\x39\x51\xe3\xcf\xfa\x74\xdb\x6e\xaf\x00\x00\x00\xff\xff\xa8\xc5\x9b\xcf\x8c\x00\x00\x00")

func _000005_sessionsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_sessionsUpSql,
		"000005_sessions.up.sql",
	)
}

func _000005_sessionsUpSql() (*asset, error) {
	bytes, err := _000005_sessionsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_sessions.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x6e, 0xc1, 0x20, 0xdb, 0xf4, 0x6, 0x8, 0x90, 0x7c, 0x91, 0x98, 0xbc, 0xe, 0x81, 0x1e, 0xd3, 0x3f, 0x62, 0x29, 0x3a, 0xf7, 0x86, 0x7e, 0xa7, 0xf1, 0x6d, 0x53, 0xa5, 0xae, 0xa3, 0xbd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000002_accounts.down.sql": _000002_accountsDownSql,
	"000002_accounts.up.sql":   _000002_accountsUpSql,
	"000003_users.down.sql":    _000003_usersDownSql,
	"000003_users.up.sql":      _000003_usersUpSql,
	"000004_groups.down.sql":   _000004_groupsDownSql,
	"000004_groups.up.sql":     _000004_groupsUpSql,
	"000005_sessions.down.sql": _000005_sessionsDownSql,
	"000005_sessions.up.sql":   _000005_sessionsUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000002_accounts.down.sql": &bintree{_000002_accountsDownSql, map[string]*bintree{}},
	"000002_accounts.up.sql":   &bintree{_000002_accountsUpSql, map[string]*bintree{}},
	"000003_users.down.sql":    &bintree{_000003_usersDownSql, map[string]*bintree{}},
	"000003_users.up.sql":      &bintree{_000003_usersUpSql, map[string]*bintree{}},
	"000004_groups.down.sql":   &bintree{_000004_groupsDownSql, map[string]*bintree{}},
	"000004_groups.up.sql":     &bintree{_000004_groupsUpSql, map[string]*bintree{}},
	"000005_sessions.down.sql": &bintree{_000005_sessionsDownSql, map[string]*bintree{}},
	"000005_sessions.up.sql":   &bintree{_000005_sessionsUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
