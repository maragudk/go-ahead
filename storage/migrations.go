// Code generated by go-bindata. DO NOT EDIT.
// sources:
// storage/migrations/000001_noop.down.sql (17B)
// storage/migrations/000001_noop.up.sql (17B)
// storage/migrations/000002_accounts.down.sql (21B)
// storage/migrations/000002_accounts.up.sql (278B)
// storage/migrations/000003_users.down.sql (49B)
// storage/migrations/000003_users.up.sql (712B)
// storage/migrations/000004_groups.down.sql (76B)
// storage/migrations/000004_groups.up.sql (839B)
// storage/migrations/000005_sessions.down.sql (21B)
// storage/migrations/000005_sessions.up.sql (144B)

package storage

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_noopDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\x70\xc9\x4f\x2d\x56\xc8\xcb\x2f\xc9\xc8\xcc\x4b\xd7\xe3\x02\x04\x00\x00\xff\xff\xe1\x05\xc3\x02\x11\x00\x00\x00")

func _000001_noopDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_noopDownSql,
		"000001_noop.down.sql",
	)
}

func _000001_noopDownSql() (*asset, error) {
	bytes, err := _000001_noopDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_noop.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0xc6, 0xf5, 0x1e, 0x94, 0x3f, 0x4b, 0x91, 0x1c, 0x67, 0xe0, 0x7a, 0x1, 0x49, 0xb9, 0x4e, 0x4a, 0x68, 0xba, 0x6b, 0xee, 0x3a, 0xfb, 0x1a, 0x27, 0x6c, 0xc0, 0x55, 0xf2, 0x13, 0x47, 0xca}}
	return a, nil
}

var __000001_noopUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\x70\xc9\x4f\x2d\x56\xc8\xcb\x2f\xc9\xc8\xcc\x4b\xd7\xe3\x02\x04\x00\x00\xff\xff\xe1\x05\xc3\x02\x11\x00\x00\x00")

func _000001_noopUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_noopUpSql,
		"000001_noop.up.sql",
	)
}

func _000001_noopUpSql() (*asset, error) {
	bytes, err := _000001_noopUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_noop.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0xc6, 0xf5, 0x1e, 0x94, 0x3f, 0x4b, 0x91, 0x1c, 0x67, 0xe0, 0x7a, 0x1, 0x49, 0xb9, 0x4e, 0x4a, 0x68, 0xba, 0x6b, 0xee, 0x3a, 0xfb, 0x1a, 0x27, 0x6c, 0xc0, 0x55, 0xf2, 0x13, 0x47, 0xca}}
	return a, nil
}

var __000002_accountsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\x57\x08\x34\xae\x15\x00\x00\x00")

func _000002_accountsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_accountsDownSql,
		"000002_accounts.down.sql",
	)
}

func _000002_accountsDownSql() (*asset, error) {
	bytes, err := _000002_accountsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_accounts.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0xb6, 0xe4, 0x2b, 0x15, 0x79, 0x16, 0xc3, 0x7d, 0x19, 0x7f, 0x32, 0xb9, 0xed, 0x17, 0x32, 0xa7, 0x8c, 0xc1, 0xca, 0x78, 0x31, 0xb2, 0x14, 0x17, 0x38, 0x83, 0x55, 0x2f, 0xb5, 0x4a, 0x98}}
	return a, nil
}

var __000002_accountsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8d\x41\x4e\xc3\x40\x0c\x45\xf7\x73\x8a\xbf\x6c\x25\xca\x05\x38\x4c\xe4\xcc\xb8\xc1\xc2\xe3\x89\x3c\x36\x28\xb7\x47\xa5\x22\xec\xd9\xda\xff\xbd\x77\xbb\x81\x6a\x1d\x69\x31\xf1\x4e\x9f\x0c\xa3\xce\x13\x64\x0d\x5f\xa2\x8a\x95\x91\x93\x1b\x76\x97\x4e\x2e\x7a\xe0\x3e\x1c\xab\xa8\x8a\x6d\xaf\xa5\x3a\x53\x30\x82\x56\xe5\x3f\xd1\xa5\x00\xd2\x90\x29\xbf\xe0\x81\x0f\x3e\xd0\xf8\x4e\xa9\x81\x8d\x6d\x71\xb2\x36\xfa\xf2\xd8\x5c\xae\x2f\x05\x3f\x61\xcc\x70\xb1\x0d\x36\x02\x96\xaa\x8f\xfb\x33\xd1\x10\xd2\x79\x06\xf5\xfd\xfc\x9e\xbe\x9a\xee\x6c\xb1\x9c\x93\xa7\x31\xf7\xf6\x0f\xb2\x5c\xdf\xca\x77\x00\x00\x00\xff\xff\x68\x6e\x68\x92\x16\x01\x00\x00")

func _000002_accountsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_accountsUpSql,
		"000002_accounts.up.sql",
	)
}

func _000002_accountsUpSql() (*asset, error) {
	bytes, err := _000002_accountsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_accounts.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0xad, 0x66, 0x7f, 0x9e, 0xbd, 0x42, 0xaf, 0x18, 0x44, 0x9e, 0xeb, 0xbc, 0x75, 0xd, 0xcc, 0x74, 0x9b, 0xa6, 0x24, 0x1a, 0x3a, 0xd4, 0x78, 0x89, 0x95, 0xca, 0x56, 0xe9, 0x71, 0x3f, 0x1c}}
	return a, nil
}

var __000003_usersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x89\xcf\x4d\xcd\x4d\x4a\x2d\x2a\xce\xc8\x2c\xb0\xe6\x42\x92\x2e\x2d\x4e\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\x78\xb7\x2d\x81\x31\x00\x00\x00")

func _000003_usersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_usersDownSql,
		"000003_users.down.sql",
	)
}

func _000003_usersDownSql() (*asset, error) {
	bytes, err := _000003_usersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_users.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x2a, 0x47, 0xe9, 0x34, 0xf3, 0xbc, 0x63, 0xd9, 0x3f, 0x12, 0xda, 0xc, 0xa5, 0x3c, 0xc3, 0x27, 0x47, 0x13, 0xf8, 0xee, 0x61, 0xf1, 0xff, 0xee, 0xa6, 0x23, 0x66, 0x9c, 0xa5, 0xee, 0x25}}
	return a, nil
}

var __000003_usersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x41\x8e\xdb\x30\x0c\x45\xf7\x3e\xc5\xdf\xd5\x01\xe2\xb9\x40\xef\xd0\x2b\x04\x8c\xc4\x8c\x89\x4a\x94\x2b\x52\x33\xc8\xed\x0b\x29\xb5\x67\x5a\xa4\x9b\x59\xd9\x10\xf9\xf8\xbf\xf8\xb5\x2c\x68\xc6\xd5\xb0\x92\x8d\x3f\x88\xde\x4a\xcd\xe4\x52\x14\xa4\x11\x5b\xe5\x1b\x57\xd6\xc0\xf6\x32\x85\xca\xe4\x0c\xa7\x6b\xe2\x3f\xe0\x3c\x01\x12\xd1\x9a\xf4\x5e\xc9\x54\xef\xf8\xc9\x77\x44\xbe\x51\x4b\x8e\x57\xd6\x4b\x25\x8d\x25\x5f\x7a\xcf\x7c\x3a\x4f\x80\x52\x66\x98\x57\xd1\x57\x68\x71\x68\x4b\xa9\x9f\x73\x26\x49\x7b\xa1\xa9\xfc\x6a\xfc\x57\x7d\x23\xb3\xf7\x52\xe3\x33\xf6\xe1\x2d\xc2\x25\xb3\x39\xe5\xed\xa8\x1e\x5e\x42\xab\x95\xd5\x2f\x47\xcb\xc3\x4d\xdb\xe2\x17\xc8\xe9\xf4\x7d\x9a\x96\x05\x14\x42\x69\xea\x97\xcc\xf9\xca\xd5\x56\xd9\x3a\x25\xca\x86\xf7\xb5\x40\x0c\x1b\x55\x47\xb9\x81\x74\x6f\x7e\xe9\xe0\x8f\xd2\x57\xb9\x92\x43\xfc\x9b\x81\x90\x49\xef\x8b\x97\xa5\x7f\x51\x39\x8d\x10\xfa\xc0\x33\xac\xa0\xe8\x63\xe5\x08\xa4\xb8\x32\xe8\x98\x9b\x5b\x72\xd9\x12\xef\xd3\xed\x3c\x7c\x69\xfc\xa4\x38\xa8\xb9\x5c\xdf\xa4\x34\x4b\xf7\x13\x56\x7a\xe3\xa1\xf8\xc8\xf1\x9f\x6c\x9f\x5c\xaa\x07\xbd\x1f\xef\x81\x7f\xbc\x8d\x43\x7b\x96\x78\x42\x51\x44\x4e\xec\x8c\x40\x16\x28\xf2\x58\xb3\x71\x7d\x46\x0e\xfd\xff\x63\x9f\x1f\xd5\xfc\x61\xe0\xbc\xcf\x1b\x41\xfc\x0e\x00\x00\xff\xff\x4f\x2b\x3e\xcd\xc8\x02\x00\x00")

func _000003_usersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_usersUpSql,
		"000003_users.up.sql",
	)
}

func _000003_usersUpSql() (*asset, error) {
	bytes, err := _000003_usersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_users.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0x70, 0xdd, 0x74, 0x53, 0x92, 0xa3, 0x34, 0x62, 0xa5, 0xfc, 0xef, 0x55, 0xb5, 0xa3, 0x3b, 0x5c, 0xaa, 0xab, 0xc0, 0xd1, 0x1, 0x76, 0xc9, 0xc6, 0xa2, 0x70, 0x5a, 0x36, 0xf, 0x77, 0xa0}}
	return a, nil
}

var __000004_groupsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x2f\xca\x2f\x2d\x88\xcf\x4d\xcd\x4d\x4a\x2d\x2a\xce\xc8\x2c\xb0\xe6\xc2\x90\xcc\x2f\xcf\xc3\x25\x57\x6c\xcd\x05\x08\x00\x00\xff\xff\x4f\xe5\x6c\xb6\x4c\x00\x00\x00")

func _000004_groupsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_groupsDownSql,
		"000004_groups.down.sql",
	)
}

func _000004_groupsDownSql() (*asset, error) {
	bytes, err := _000004_groupsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_groups.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0xda, 0xed, 0xb3, 0x3a, 0x6a, 0x65, 0x4b, 0x42, 0x2d, 0xc, 0x75, 0xb8, 0xa1, 0x0, 0x78, 0x63, 0x7, 0xcc, 0xe6, 0x9d, 0xf6, 0xf3, 0x66, 0xee, 0xe8, 0x96, 0xa5, 0x68, 0x8f, 0x11, 0x33}}
	return a, nil
}

var __000004_groupsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x51\xce\x9b\x30\x10\x84\xdf\x39\xc5\xbc\x85\x48\xa1\x17\xe8\x1d\x7a\x05\xb4\xe0\x25\xb8\x85\x35\x5a\xaf\x13\xe5\xf6\x95\x4d\x20\x69\x9b\xa8\xbf\xf2\x6a\xcf\xec\xec\x7c\x76\xd3\xe0\xac\x21\x2d\x11\x61\x40\x8a\xac\x11\xa4\x0c\xa1\x99\x1d\x48\x1c\x46\xba\x30\x08\x91\x7b\x65\x83\x8d\x64\x87\x98\x85\x0e\x16\xf0\x33\x78\x81\x8d\xbc\xce\xf8\x56\xf5\xca\x64\x0c\xa3\x6e\xe2\x6d\x6e\x5d\x01\xde\x21\x25\xef\xb0\xa8\x9f\x49\x6f\xf8\xc5\x37\x38\x1e\x28\x4d\x86\x33\x4b\xab\x24\x2e\xcc\x6d\xd6\xd4\xc7\x53\x85\x92\x8f\x68\xea\xe5\x0c\x09\x06\x49\xd3\x94\xcf\xbd\x5c\xbc\x91\xf9\x20\xed\x7d\xa3\xee\x66\x1c\xff\xd0\xac\x4b\x38\x98\x9f\x39\x1a\xcd\xcb\x7e\xbb\x67\xf6\x49\x95\xc5\xda\x5d\xb2\xa6\xa6\xc5\x7d\xe0\xac\x8e\xdf\xab\x6a\xe3\xd8\xce\x3c\x77\xac\x71\xf4\x4b\xf6\x78\xe1\x88\xeb\x18\x0e\x11\x0b\xa9\x65\xc8\xf4\x1e\xd6\xb3\x39\x63\x5b\x0f\x37\x78\xca\x03\x2b\x4b\xcf\xf1\x8e\xb6\xf6\xee\x88\x20\x70\x3c\xb1\x31\x7a\x8a\x3d\x39\x2e\x45\x22\xeb\x2b\x5f\x79\xe0\xf7\xb6\xe7\xe7\xa9\xb7\xf0\xd3\x36\xed\xaf\xa2\xe1\x2a\xff\xf6\x44\xb8\x4a\x7c\x54\x6c\x1a\xfc\x08\xb9\xe3\x48\x06\x2a\x83\xd0\x93\x64\xaa\x1d\xdf\x17\x70\xf0\x43\xf9\x43\xe5\xd6\xef\x6e\x94\x80\x97\x98\x1e\xd1\x99\xd2\xe7\x98\xfe\xcf\xa9\xa8\xbe\x80\xe5\x77\x00\x00\x00\xff\xff\x1b\xb7\xd7\x82\x47\x03\x00\x00")

func _000004_groupsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_groupsUpSql,
		"000004_groups.up.sql",
	)
}

func _000004_groupsUpSql() (*asset, error) {
	bytes, err := _000004_groupsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_groups.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4c, 0x49, 0x1d, 0x4c, 0x35, 0xb0, 0x8b, 0x9b, 0xc6, 0xea, 0x8f, 0xed, 0x20, 0x69, 0xf4, 0x93, 0x12, 0x66, 0x9c, 0x54, 0x1e, 0x70, 0xa8, 0x39, 0x80, 0x51, 0xc6, 0x91, 0x9b, 0xd2, 0xe6, 0x1d}}
	return a, nil
}

var __000005_sessionsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x28\x4e\x2d\x2e\xce\xcc\xcf\x2b\xb6\xe6\x02\x04\x00\x00\xff\xff\x32\xbb\x60\x54\x15\x00\x00\x00")

func _000005_sessionsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_sessionsDownSql,
		"000005_sessions.down.sql",
	)
}

func _000005_sessionsDownSql() (*asset, error) {
	bytes, err := _000005_sessionsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_sessions.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0xf4, 0xe5, 0x31, 0x70, 0x9, 0x89, 0x17, 0xa, 0x33, 0xb8, 0x17, 0x3d, 0x6e, 0x64, 0xcc, 0xf8, 0xab, 0x55, 0xe9, 0x7b, 0x85, 0x2b, 0xc, 0x99, 0x1, 0x83, 0x85, 0x4c, 0x17, 0x96, 0xfc}}
	return a, nil
}

var __000005_sessionsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\x41\xaa\xc3\x30\x0c\x44\xf7\x3e\xc5\x2c\x13\xf8\x37\xf8\x87\x09\x4a\x3d\x14\x11\x5b\x36\x96\x0a\xf6\xed\x4b\x09\x14\xba\x1b\xe6\x3d\x78\x8f\x41\x09\x22\xe4\x2c\x84\xd3\x5d\x9b\x39\xb6\x04\x44\xbb\x68\xf0\x18\x6a\x4f\xf4\xa1\x55\xc6\xc2\xc5\xf5\x97\x80\x2c\x21\x38\x57\xd0\x61\x2d\x60\xaf\x52\x3e\x37\x67\xd7\xb1\x10\x5a\xe9\x21\xb5\xff\x40\xb5\xcc\xf9\x4d\x1c\xb7\x7b\x68\x9e\xd8\xee\xbd\xa7\xfd\x3f\xbd\x03\x00\x00\xff\xff\x28\xcd\x6e\xd3\x90\x00\x00\x00")

func _000005_sessionsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_sessionsUpSql,
		"000005_sessions.up.sql",
	)
}

func _000005_sessionsUpSql() (*asset, error) {
	bytes, err := _000005_sessionsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_sessions.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x71, 0xb, 0x7a, 0x5a, 0xed, 0xef, 0xd1, 0x83, 0x58, 0x96, 0xc2, 0x44, 0x3b, 0xcd, 0xc8, 0xb1, 0xb2, 0x4, 0x2, 0xdb, 0x9d, 0xd6, 0x80, 0xc4, 0x2c, 0x4a, 0xfc, 0xb9, 0x1, 0x43, 0x7a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_noop.down.sql":     _000001_noopDownSql,
	"000001_noop.up.sql":       _000001_noopUpSql,
	"000002_accounts.down.sql": _000002_accountsDownSql,
	"000002_accounts.up.sql":   _000002_accountsUpSql,
	"000003_users.down.sql":    _000003_usersDownSql,
	"000003_users.up.sql":      _000003_usersUpSql,
	"000004_groups.down.sql":   _000004_groupsDownSql,
	"000004_groups.up.sql":     _000004_groupsUpSql,
	"000005_sessions.down.sql": _000005_sessionsDownSql,
	"000005_sessions.up.sql":   _000005_sessionsUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_noop.down.sql":     &bintree{_000001_noopDownSql, map[string]*bintree{}},
	"000001_noop.up.sql":       &bintree{_000001_noopUpSql, map[string]*bintree{}},
	"000002_accounts.down.sql": &bintree{_000002_accountsDownSql, map[string]*bintree{}},
	"000002_accounts.up.sql":   &bintree{_000002_accountsUpSql, map[string]*bintree{}},
	"000003_users.down.sql":    &bintree{_000003_usersDownSql, map[string]*bintree{}},
	"000003_users.up.sql":      &bintree{_000003_usersUpSql, map[string]*bintree{}},
	"000004_groups.down.sql":   &bintree{_000004_groupsDownSql, map[string]*bintree{}},
	"000004_groups.up.sql":     &bintree{_000004_groupsUpSql, map[string]*bintree{}},
	"000005_sessions.down.sql": &bintree{_000005_sessionsDownSql, map[string]*bintree{}},
	"000005_sessions.up.sql":   &bintree{_000005_sessionsUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
